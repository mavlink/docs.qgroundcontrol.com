import{_ as t,o as e,c as s,R as i}from"./chunks/framework.EkdjhkIl.js";const g=JSON.parse('{"title":"单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"zh/qgc-dev-guide/contribute/unit_tests.md","filePath":"zh/qgc-dev-guide/contribute/unit_tests.md"}'),n={name:"zh/qgc-dev-guide/contribute/unit_tests.md"},a=i('<h1 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h1><p><em>QGroundControl</em> (QGC) contains a set of unit tests that must pass before a pull request will be accepted. 向QGC添加新的复杂子系统应该有相应的新单元测试来测试它。</p><p>单元测试的完整列表可以在UnitTestList.cc中找到。</p><p>要运行单元测试：</p><ol><li>使用UNITTEST_BUILD定义在调试模式下构建。</li><li>复制debug目录中的deploy / qgroundcontrol-start.sh脚本</li><li>Run <em>all</em> unit tests from the command line using the <code>--unittest</code> command line option. For Linux this is done as shown:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>使用--unittest命令行选项从命令行运行所有单元测试。 对于Linux，这是完成如下所示： `qgroundcontrol-start.sh --unittest`</span></span></code></pre></div></li><li>Run <em>individual</em> unit tests by specifying the test name as well: <code>--unittest:RadioConfigTest</code>. For Linux this is done as shown:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>通过指定测试名称来运行单个单元测试： - unittest：RadioConfigTest。 对于Linux，这是完成如下所示： `qgroundcontrol-start.sh --unittest:RadioConfigTest`</span></span></code></pre></div></li></ol>',5),o=[a];function c(l,d,u,p,r,h){return e(),s("div",null,o)}const m=t(n,[["render",c]]);export{g as __pageData,m as default};
