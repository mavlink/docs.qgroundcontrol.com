import{_ as i,o as s,c as a,R as t}from"./chunks/framework.dKSasamX.js";const E=JSON.parse('{"title":"MAVLink Log Format","description":"","frontmatter":{},"headers":[],"relativePath":"en/qgc-dev-guide/file_formats/mavlink.md","filePath":"en/qgc-dev-guide/file_formats/mavlink.md"}'),e={name:"en/qgc-dev-guide/file_formats/mavlink.md"},n=t(`<h1 id="mavlink-log-format" tabindex="-1">MAVLink Log Format <a class="header-anchor" href="#mavlink-log-format" aria-label="Permalink to &quot;MAVLink Log Format&quot;">​</a></h1><p><em>QGroundControl</em> allows you to generate plain MAVLink packet logs that can be replayed (with QGroundControl) to watch a mission again for analysis.</p><p>The format is binary:</p><ul><li>Byte 1-8: Timestamp in microseconds since Unix epoch as unsigned 64 bit integer</li><li>Byte 9-271: MAVLink packet (263 bytes maximum packet length, not all bytes have to be actual data, the packet might be shorter. Includes packet start sign)</li></ul><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><p>To check your data, open your written file in a hex editor. You should see after 8 bytes <strong>0x55</strong>. The first 8 bytes should also convert to a valid timestamp, so something either close to zero or around the number <strong>1294571828792000</strong> (which is the current Unix epoch timestamp in microseconds).</p><h2 id="c-sketch-for-logging-mavlink" tabindex="-1">C++ Sketch for logging MAVLink <a class="header-anchor" href="#c-sketch-for-logging-mavlink" aria-label="Permalink to &quot;C++ Sketch for logging MAVLink&quot;">​</a></h2><p>The code fragment below shows how to implement logging using <a href="http://www.cplusplus.com/reference/iostream/istream/" target="_blank" rel="noreferrer">C++ streams</a> from the C++ standard library.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//write into mavlink logfile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAVLINK_MAX_PACKET_LEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buf[len];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSystemTimeUsecs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavlink_msg_to_send_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mavlinkFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flush;</span></span></code></pre></div>`,9),l=[n];function h(k,p,r,o,g,d){return s(),a("div",null,l)}const m=i(e,[["render",h]]);export{E as __pageData,m as default};
