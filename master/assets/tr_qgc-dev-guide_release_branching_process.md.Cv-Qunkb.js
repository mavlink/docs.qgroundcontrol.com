import{_ as e,c as a,o as t,a5 as o}from"./chunks/framework.Cba3l4cj.js";const b=JSON.parse('{"title":"QGroundControl Release/Branching process","description":"","frontmatter":{},"headers":[],"relativePath":"tr/qgc-dev-guide/release_branching_process.md","filePath":"tr/qgc-dev-guide/release_branching_process.md"}'),r={name:"tr/qgc-dev-guide/release_branching_process.md"},s=o('<h1 id="qgroundcontrol-release-branching-process" tabindex="-1">QGroundControl Release/Branching process <a class="header-anchor" href="#qgroundcontrol-release-branching-process" aria-label="Permalink to &quot;QGroundControl Release/Branching process&quot;">​</a></h1><h2 id="semantic-versioning" tabindex="-1">Semantic Versioning <a class="header-anchor" href="#semantic-versioning" aria-label="Permalink to &quot;Semantic Versioning&quot;">​</a></h2><p>QGC uses semantic versioning for the version numbers associated with its releases. Semantic versioning is a 3-component number in the format of <code>vX.Y.Z</code>, where:</p><ul><li><code>X</code> is the major version.</li><li><code>Y</code> is the minor version.</li><li><code>Z</code> is the patch version.</li></ul><h2 id="stable-builds" tabindex="-1">Stable Builds <a class="header-anchor" href="#stable-builds" aria-label="Permalink to &quot;Stable Builds&quot;">​</a></h2><p>The current stable build is the highest quality build available for QGC. <a href="#patch_releases">Patch releases</a> of the stable build are regularly made to fix important issues.</p><p>Stable builds are built from a separate branch that is named with the format: <code>Stable_VX.Y</code> (note, there is no patch number!) The branch has one or more git tags for each patch release (with the format <code>vX.Y.Z</code>), indicating the point in the repo source code that the associated patch release was created from.</p><h3 id="patch_releases" tabindex="-1">Patch Releases <a class="header-anchor" href="#patch_releases" aria-label="Permalink to &quot;Patch Releases {#patch_releases}&quot;">​</a></h3><p>A patch release contains fixes to the stable release that are important enough to <em>require</em> an update, and are safe enough that the stable release continues to maintain high quality.</p><p>Patch releases increment the patch version number only.</p><h3 id="patch-development-stage" tabindex="-1">Patch - Development Stage <a class="header-anchor" href="#patch-development-stage" aria-label="Permalink to &quot;Patch - Development Stage&quot;">​</a></h3><p>Approved fixes to the stable release are commited to the current stable branch. These fixes continue to queue up in the stable branch until a patch release is made (see next step).</p><p>Commits/changes to the stable branch must also be brought over to the master branch (either through cherry pick or separate pulls).</p><h3 id="patch-release-stage" tabindex="-1">Patch - Release Stage <a class="header-anchor" href="#patch-release-stage" aria-label="Permalink to &quot;Patch - Release Stage&quot;">​</a></h3><p>At the point where the decision is made to do a patch release, the release binaries are created and a new <em>tag</em> is added to the stable branch (with the same patch release number) indicating the associated source code.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>New branches are not created for patch releases - only for major and minor releases.</p></div><h2 id="daily-builds" tabindex="-1">Daily Builds <a class="header-anchor" href="#daily-builds" aria-label="Permalink to &quot;Daily Builds&quot;">​</a></h2><h3 id="development-stage" tabindex="-1">Development Stage <a class="header-anchor" href="#development-stage" aria-label="Permalink to &quot;Development Stage&quot;">​</a></h3><p>Daily builds are built from the <code>master</code> branch, and this is where all new major feature development happens. The state of master represents either the next minor point release, or a new major version release (depending on the level of change).</p><p>There are no git tags associated with a released daily builds. The released daily build will always match repo HEAD.</p><h3 id="release-stage" tabindex="-1">Release Stage <a class="header-anchor" href="#release-stage" aria-label="Permalink to &quot;Release Stage&quot;">​</a></h3><p>When the decision is made to release a new major/minor version the master branch tends to go through an intial lockdown mode. This is where only important fixes for the release are accepted as pull requests.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>During the lockdown phase, new features are not allowed in master.</p></div><p>Once the level of fixes associated with the release slows down to a low level, a new stable branch is created (at this point the <code>master</code> branch can move forward again as the latest and greatest).</p><p>Fixes continue in the stable branch until it is deemed ready to release (ideally after a short time)! At that point the new stable branch is tagged with the new version tag and the first stable release is made.</p><h2 id="custom-builds" tabindex="-1">Custom Builds <a class="header-anchor" href="#custom-builds" aria-label="Permalink to &quot;Custom Builds&quot;">​</a></h2><p>A proposed strategy for branching on custom builds can be found <a href="./custom_build/release_branching_process.html">here</a>.</p><h2 id="process-to-create-a-new-stable" tabindex="-1">Process to create a new Stable <a class="header-anchor" href="#process-to-create-a-new-stable" aria-label="Permalink to &quot;Process to create a new Stable&quot;">​</a></h2><h3 id="major-minor-version" tabindex="-1">Major/Minor Version <a class="header-anchor" href="#major-minor-version" aria-label="Permalink to &quot;Major/Minor Version&quot;">​</a></h3><ol><li>Create a branch from master named <code>Stable_VX.Y</code> where <code>X</code> is the major version number and <code>Y</code> is the minor version number.</li><li>Create a tag on the HEAD of master name <code>dX.Y</code> where the minor version is one greater than the new Stable. For example if you are create a new Stable 4.2 version then the tag would be &#39;d4.3&#39;. This tag is used to create the version numbers for Android daily builds. Example: <code>git tag -a d4.3.0 -m &quot;QGroundControl Daily Android Version Base&quot;</code>.</li><li>Create an annotated tag on the newly created Stable branch named <code>vX.Y.0</code> with the correct major/minor version number. Example: <code>git tag -a v4.2.0 -m &quot;QGroundControl v4.2.0&quot;</code>. Pushing this tag to the repo will start a build.</li><li>Once the build completes verify the builds are pushed up to S3 correctly and sanity check that they at least boot correctly. Location on S3 will be <code>https://qgroundcontrol.s3.us-west-2.amazonaws.com/latest/...</code>.</li><li>Update the <code>https://qgroundcontrol.s3.us-west-2.amazonaws.com/builds/latest/QGC.version.txt</code> text file to the latest Stable version. This will notify uses there is a new Stable available the next time they launch QGC.</li></ol><h3 id="patch-version" tabindex="-1">Patch Version <a class="header-anchor" href="#patch-version" aria-label="Permalink to &quot;Patch Version&quot;">​</a></h3><p>Creating a new Patch Version is the same except you skip steps 1 and 2 and in step 3 you bump the patch version number up as needed.</p>',32),i=[s];function n(l,h,c,d,u,p){return t(),a("div",null,i)}const g=e(r,[["render",n]]);export{b as __pageData,g as default};
