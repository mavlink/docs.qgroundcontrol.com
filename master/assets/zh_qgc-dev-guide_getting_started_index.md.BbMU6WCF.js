import{_ as o,a as n}from"./chunks/qt_creator_build_qgc.BmjHaw1T.js";import{_ as r,c as d,o as p,ag as s,j as e,a as i,t as l}from"./chunks/framework.BudlMBKT.js";const f=JSON.parse('{"title":"从源码开始并构建","description":"","frontmatter":{"qt_version":"6.8.3"},"headers":[],"relativePath":"zh/qgc-dev-guide/getting_started/index.md","filePath":"zh/qgc-dev-guide/getting_started/index.md"}'),h={name:"zh/qgc-dev-guide/getting_started/index.md"},u={class:"warning custom-block"};function g(a,t,c,m,k,b){return p(),d("div",null,[t[15]||(t[15]=s('<h1 id="从源码开始并构建" tabindex="-1">从源码开始并构建 <a class="header-anchor" href="#从源码开始并构建" aria-label="Permalink to &quot;从源码开始并构建&quot;">​</a></h1><p>本主题说明如何获取 <em>QGroundControl</em> 源代码并在本机或在 <em>Vagrant</em> 环境中构建它。 本主题还提供其他可选功能信息及特定于操作系统的功能信息。 本主题还提供其他可选功能信息及特定于操作系统的功能信息。</p><h2 id="每日构建" tabindex="-1">每日构建 <a class="header-anchor" href="#每日构建" aria-label="Permalink to &quot;每日构建&quot;">​</a></h2><p>如果您只是想测试 (而不是调试) 最近生成的 <em>QGroundControl</em> ，那么请使用<a href="./../../qgc-user-guide/releases/daily_builds.html">Daily build</a>。 官方提供了适用于所有平台的版本。 官方提供了适用于所有平台的版本。</p><h2 id="源代码" tabindex="-1">源代码 <a class="header-anchor" href="#源代码" aria-label="Permalink to &quot;源代码&quot;">​</a></h2><p><em>QGroundControl</em> 的源代码保存在GitHub 上：<a href="https://github.com/mavlink/qgroundcontrol%E3%80%82" target="_blank" rel="noreferrer">https://github.com/mavlink/qgroundcontrol。</a> 它采用 <a href="https://github.com/mavlink/qgroundcontrol/blob/master/.github/COPYING.md" target="_blank" rel="noreferrer">Apache 2.0 和 GPLv3 双重授权</a>。</p><p>要获取源文件, 请执行以下操作:</p><ol><li><p>克隆存储库 (或您的分叉), 包括子模块：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/mavlink/qgroundcontrol.git</span></span></code></pre></div></li><li><p>2.更新子模块（每次拉新源代码时都这样做）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提示：不能使用Github以zip形式下载源文件，因为zip压缩包中不包含相应的子模块源代码。 你必须使用git工具！ 你必须使用git工具！</p></div><h2 id="构建qgroundcontrol开发环境" tabindex="-1">构建QGroundControl开发环境 <a class="header-anchor" href="#构建qgroundcontrol开发环境" aria-label="Permalink to &quot;构建QGroundControl开发环境&quot;">​</a></h2><h3 id="使用容器" tabindex="-1">使用容器 <a class="header-anchor" href="#使用容器" aria-label="Permalink to &quot;使用容器&quot;">​</a></h3><p>我们支持使用存储库源代码树上的容器进行 Linux 构建，这可以帮助您开发和部署 QGC 应用程序，而无需在本地环境中安装任何要求。</p><p><a href="./../getting_started/container.html">容器指南</a></p><h3 id="原生构建" tabindex="-1">原生构建 <a class="header-anchor" href="#原生构建" aria-label="Permalink to &quot;原生构建&quot;">​</a></h3><p><em>QGroundControl</em> 支持macos、linux、windows 和 Android 平台的构建。 理论上可以为iOS创建一个 QGC 版本，但不再支持作为标准构建。 <em>QGroundControl</em> 使用 <a href="http://www.qt.io" target="_blank" rel="noreferrer">Qt</a>作为其跨平台支持库。</p>',15)),e("p",null,[i("所需的 Qt 版本为 "+l(a.$frontmatter.qt_version)+" ",1),t[0]||(t[0]=e("strong",null,"(必须无误)",-1)),t[1]||(t[1]=i("。"))]),e("div",u,[t[3]||(t[3]=e("p",{class:"custom-block-title"},"WARNING",-1)),e("p",null,[t[2]||(t[2]=e("strong",null,"请勿使用任何其他版本的 Qt！",-1)),i(" QGC 已通过指定 Qt 版本（"+l(a.$frontmatter.qt_version)+"）的全面测试。 其它的 Qt 版本很可能会注入影响稳定和安全的 bug (即使QGC 编译通过)。",1)])]),t[16]||(t[16]=e("p",null,[i("更多信息请看: "),e("a",{href:"https://doc.qt.io/qt-6/supported-platforms.html",target:"_blank",rel:"noreferrer"},"Qt 6 支持平台列表"),i("。")],-1)),t[17]||(t[17]=e("h4",{id:"安装qt",tabindex:"-1"},[i("安装Qt "),e("a",{class:"header-anchor",href:"#安装qt","aria-label":'Permalink to "安装Qt"'},"​")],-1)),t[18]||(t[18]=e("p",null,[i("您"),e("strong",null,"必须像下面描述的那样安装Qt"),i(" ，而不是使用预构建的软件包，例如Linux发行版。")],-1)),t[19]||(t[19]=e("p",null,"如何安装Qt：",-1)),e("ol",null,[t[9]||(t[9]=e("li",null,[e("p",null,[i("下载并运行"),e("a",{href:"https://www.qt.io/download-qt-installer-oss",target:"_blank",rel:"noreferrer"},"Qt Online Installer")]),e("ul",null,[e("li",null,[e("strong",null,"Ubuntu:"),e("ul",null,[e("li",null,[i("使用以下命令将下载的文件设置为可执行文件："),e("code",null,"chmod + x")]),e("li",null,"您可能还需要安装 libxcb-cursor0")])])])],-1)),t[10]||(t[10]=e("li",null,[e("p",null,'在 _Installation 文件夹页面选择"自定义安装"')],-1)),e("li",null,[t[8]||(t[8]=e("p",null,[i("在 "),e("em",null,"选择组件"),i(" 页面：")],-1)),e("ul",null,[e("li",null,[i("如果您没有看到 "+l(a.$frontmatter.qt_version)+"_ 列出_Qt选中 ",1),t[4]||(t[4]=e("em",null,"Archive",-1)),t[5]||(t[5]=i(" 复选框并单击 ")),t[6]||(t[6]=e("em",null,"Filter",-1)),t[7]||(t[7]=i("。"))])])])]),e("ul",null,[e("li",null,[t[11]||(t[11]=i("在 Qt -> ")),e("em",null,"Qt "+l(a.$frontmatter.qt_version),1),t[12]||(t[12]=s(" 下选择： <ul><li><strong>Windows</strong>: MSVC 2022 <em>arch</em> - 其中 “arch” 指的是您机器的架构</li><li><strong>Mac</strong>：桌面</li><li><strong>Linux</strong>: gcc 64-bit 桌面</li><li><strong>Android</strong>: Android</li></ul>",2))]),t[13]||(t[13]=e("li",null,[i("选择所有 "),e("em",null,"Additional Libraries")],-1)),t[14]||(t[14]=e("li",null,"取消选择 QT Design Studio",-1))]),t[20]||(t[20]=s('<ol><li><p>安装附加软件包(特殊平台)</p><ul><li><strong>Ubuntu:</strong> <code>sudo bash ./qgroundcontrol/tools/setup/install-dependencies-debian.sh</code></li><li><strong>Fedora:</strong> <code>sudo dnf install speech-dispatcher SDL2-devel SDL2 systemd-devel patchelf</code></li><li><strong>Arch Linux:</strong> <code>pacman -Sy speech-dispatcher patchelf</code></li><li><strong>Mac</strong> <code>sh qgroundcontrol/tools/setup/install-dependencies-osx.sh</code></li><li><strong>Android</strong> <a href="https://doc.qt.io/qt-6/android-getting-started.html" target="_blank" rel="noreferrer">Setup</a>。 最新版本需要 JDK17 。 NDK 版本：25.1.8937393 您可以通过审查项目设置确认它正在使用：<strong>Projects &gt; Managing Kits &gt; Devices &gt; Android (tab) &gt; Android Settings &gt; <em>JDK location</em></strong>。 注意：访问此处查看更详细的配置 <a href=".github/workflows/android.yml">android.yml</a></li></ul></li><li><p>安装可选/特定操作功能</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>依赖操作系统和用户安装的库的可选功能在下面链接/描述。 这些功能可以被强制启用/禁用，为qmake指定额外的值。</p></div><ul><li><strong>视频流/Gstream:</strong> - 查看 <a href="https://github.com/mavlink/qgroundcontrol/blob/master/src/VideoManager/VideoReceiver/GStreamer/README.md" target="_blank" rel="noreferrer">视频流</a></li></ul></li></ol><h4 id="vs" tabindex="-1">安装 Visual Studio (仅限Windows) <a class="header-anchor" href="#vs" aria-label="Permalink to &quot;安装 Visual Studio (仅限Windows) {#vs}&quot;">​</a></h4><p>安装 <a href="https://visualstudio.microsoft.com/downloads/" target="_blank" rel="noreferrer">Visual Studio 2022 Community Edition</a>。</p><p>进行安装时，选择 <em>使用 C++ 进行桌面开发</em> ：</p><p><img src="'+o+'" alt="Visual Studio 2019 - 选择基于 C++ 的桌面开发环境"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Visual Studio 仅用于获取编译器。 构建 <em>QGroundControl</em> 可直接按以下概述，使用 <a href="#qt-creator">Qt Creator</a> 或 <a href="#cmake">cmake</a> 完成。</p></div><h4 id="使用-qt-creator-qt-creator-进行构建" tabindex="-1">使用 Qt Creator {#qt-creator} 进行构建 <a class="header-anchor" href="#使用-qt-creator-qt-creator-进行构建" aria-label="Permalink to &quot;使用 Qt Creator {#qt-creator} 进行构建&quot;">​</a></h4><ol><li><p>启动 <em>Qt Creator</em>，选择 Open Project 并选择 <strong>CMakeLists.txt</strong> 文件。</p></li><li><p>在 <em>Configure Project</em> 页面上，它应该默认您刚刚使用上面的说明安装的 Qt 版本。 如果不从列表中选择该套件，然后点击 <em>Configure Project</em>。</p></li><li><p>使用&quot;hammer&quot; (或&quot;play&quot;) 图标或菜单构建：</p><p><img src="'+n+'" alt="QtCreator Build Button"></p></li></ol><h4 id="在cli-命令行界面-使用-cmake-cmake-进行构建" tabindex="-1">在CLI（命令行界面）使用 CMake {#cmake} 进行构建 <a class="header-anchor" href="#在cli-命令行界面-使用-cmake-cmake-进行构建" aria-label="Permalink to &quot;在CLI（命令行界面）使用 CMake {#cmake} 进行构建&quot;">​</a></h4><p>构建默认的 QGC 示例命令并在此后运行它：</p><ol><li><p>请确保您克隆了仓库并先更新子模块，见上文 <em>源代码</em> 章节并切换到仓库文件夹：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qgroundcontrol</span></span></code></pre></div></li><li><p>配置：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/Qt/6.8.3/gcc_64/bin/qt-cmake -B build -G Ninja -DCMAKE_BUILD_TYPE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Debug</span></span></code></pre></div><p>修改 qt-cmake 的目录，使其与你安装 Qt 的位置以及你想要使用的工具包相匹配。</p><p><strong>Mac</strong>: To Sign/Notarize/Staple the QGC app bundle, add <code>-DQGC_MACOS_SIGN_WITH_IDENTITY=ON</code> to the configure command line. During the <code>install</code> phase the following environment variables will need to be available:</p><ul><li><code>QGC_MACOS_SIGNING_IDENTITY</code> - Signing identity for your Developer ID certificate which must be in the keychain</li><li><code>QGC_MACOS_NOTARIZATION_USERNAME</code> - Username for your Apple Developer Account</li><li><code>QGC_MACOS_NOTARIZATION_PASSWORD</code> - App specific password for Notarization from your Apple Developer Account</li><li><code>QGC_MACOS_NOTARIZATION_TEAM_ID</code> - Apple Developer Account Team ID</li></ul></li><li><p>构建</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Debug</span></span></code></pre></div></li><li><p>Run the QGroundcontrol binary that was just built: <code>./staging/QGroundControl</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/Debug/QGroundControl</span></span></code></pre></div></li></ol><h3 id="vagrant" tabindex="-1">Vagrant <a class="header-anchor" href="#vagrant" aria-label="Permalink to &quot;Vagrant&quot;">​</a></h3><p><a href="https://www.vagrantup.com/" target="_blank" rel="noreferrer">Vagrant</a> 可以在 Linux 虚拟机内构建和运行 <em>QGroundControl</em> (如果兼容，也可以在主机机上运行)。</p><ol><li><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noreferrer">下载</a> 并 <a href="https://www.vagrantup.com/docs/getting-started/" target="_blank" rel="noreferrer">安装</a> Vagrant</li><li>在 <em>QGroundControl</em> 仓库的根目录运行 <code>vagrant up</code></li><li>若要使用图形环境，请运行 <code>vagrant reload</code></li></ol><h3 id="所有支持的操作系统的额外构建备注" tabindex="-1">所有支持的操作系统的额外构建备注 <a class="header-anchor" href="#所有支持的操作系统的额外构建备注" aria-label="Permalink to &quot;所有支持的操作系统的额外构建备注&quot;">​</a></h3><ul><li><strong>并行构建：</strong> 对于非Windows构建，您可以使用 &quot;-j#&quot; 选项来运行并行构建。</li><li>**如果你在运行 <em>QGroundControll</em>**时遇到此错误: <code>/usr/lib/x86_64-linux-gnu/libstdc++.so.6: version &#39;GLIBCXX_3.4.20&#39; not found.</code>，你需要更新到最新的 <em>gcc</em> ，或者通过使用 <code>sudo apt-get install libstdc++6</code> 安装最新的 <em>libstdc++.6</em> 。</li><li><strong>单元测试:</strong> 若要运行 <a href="./../contribute/unit_tests.html">单元测试</a>，使用 <code>QGC_UNITEST_BUILD</code> 定义在 <code>debug</code> 模式下构建，然后复制 <code>deposition / qgroundcontrol-start。 运行测试前，将 </code>deploy/qgroundcontrol-start.sh` 脚本复制到debug目录中。</li></ul><h2 id="构建-qgc-安装文件" tabindex="-1">构建 QGC 安装文件 <a class="header-anchor" href="#构建-qgc-安装文件" aria-label="Permalink to &quot;构建 QGC 安装文件&quot;">​</a></h2><p>作为正常构建过程的一部分，您还可以为 <em>QGroundControl</em> 创建安装文件。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Release</span></span></code></pre></div>',19))])}const q=r(h,[["render",g]]);export{f as __pageData,q as default};
