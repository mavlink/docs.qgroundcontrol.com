import{_ as e,o as t,c as i,R as s}from"./chunks/framework.nC7XP24u.js";const p=JSON.parse('{"title":"User Interface Design","description":"","frontmatter":{},"headers":[],"relativePath":"ko/qgc-dev-guide/user_interface_design/index.md","filePath":"ko/qgc-dev-guide/user_interface_design/index.md"}'),o={name:"ko/qgc-dev-guide/user_interface_design/index.md"},n=s('<h1 id="user-interface-design" tabindex="-1">User Interface Design <a class="header-anchor" href="#user-interface-design" aria-label="Permalink to &quot;User Interface Design&quot;">â€‹</a></h1><p>The main pattern for UI design in QGC is a UI page written in QML, many times communicating with a custom &quot;Controller&quot; written in C++. This follows a somewhat hacked variant of the MVC design pattern.</p><p>The QML code binds to information associated with the system through the following mechanisms:</p><ul><li>The custom controller</li><li>The global <code>QGroundControl</code> object which provides access to things like the active Vehicle</li><li>The FactSystem which provides access to parameters and in some cases custom Facts.</li></ul><p>Note: Due to the complexity of the QML used in QGC as well as it&#39;s reliance on communication with C++ objects to drive the ui it is not possible to use the QML Designer provided by Qt to edit QML.</p>',5),a=[n];function r(c,d,h,l,_,u){return t(),i("div",null,a)}const g=e(o,[["render",r]]);export{p as __pageData,g as default};
