import{_ as e,o as a,c as t,R as s}from"./chunks/framework.O0REyYVi.js";const b=JSON.parse('{"title":"Git Branching","description":"","frontmatter":{},"headers":[],"relativePath":"zh/qgc-dev-guide/GitBranching.md","filePath":"zh/qgc-dev-guide/GitBranching.md"}'),i={name:"zh/qgc-dev-guide/GitBranching.md"},r=s('<h1 id="git-branching" tabindex="-1">Git Branching <a class="header-anchor" href="#git-branching" aria-label="Permalink to &quot;Git Branching&quot;">​</a></h1><h2 id="semantic-versioning" tabindex="-1">Semantic Versioning <a class="header-anchor" href="#semantic-versioning" aria-label="Permalink to &quot;Semantic Versioning&quot;">​</a></h2><p>QGC uses semantic version for the version numbers associated with its releases. Semantic versioning is a 3-component number in the format of <code>vX.Y.Z</code>, where:</p><ul><li><code>X</code> is the major version.</li><li><code>Y</code> is the minor version.</li><li><code>Z</code> is the patch version.</li></ul><h2 id="stable-builds" tabindex="-1">Stable Builds <a class="header-anchor" href="#stable-builds" aria-label="Permalink to &quot;Stable Builds&quot;">​</a></h2><p>The current stable build is the highest quality build available for QGC. <a href="#patch_releases">Patch releases</a> of the stable build are regularly made to fix important issues.</p><p>Stable builds are built from a separate branch that is named with the format: <code>Stable_VX.Y</code> (note, there is no patch number!) The branch has one or more git tags for each patch release (with the format <code>vX.Y.Z</code>), indicating the point in the repo source code that the associated patch release was created from.</p><h3 id="patch_releases" tabindex="-1">Patch Releases <a class="header-anchor" href="#patch_releases" aria-label="Permalink to &quot;Patch Releases {#patch_releases}&quot;">​</a></h3><p>A patch release contains fixes to the stable release that are important enough to <em>require</em> an update, and are safe enough that the stable release continues to maintain high quality.</p><p>Patch releases increment the patch version number only.</p><h3 id="patch-development-stage" tabindex="-1">Patch - Development Stage <a class="header-anchor" href="#patch-development-stage" aria-label="Permalink to &quot;Patch - Development Stage&quot;">​</a></h3><p>Approved fixes to the stable release are commited to the current stable branch. These fixes continue to queue up in the stable branch until a patch release is made (see next step).</p><p>Commits/changes to the stable branch must also be brought over to the master branch (either through cherry pick or separate pulls).</p><h3 id="patch-release-stage" tabindex="-1">Patch - Release Stage <a class="header-anchor" href="#patch-release-stage" aria-label="Permalink to &quot;Patch - Release Stage&quot;">​</a></h3><p>At the point where the decision is made to do a patch release, the release binaries are created and a new <em>tag</em> is added to the stable branch (with the same patch release number) indicating the associated source code.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>New branches are not created for patch releases - only for major and minor releases.</p></div><h2 id="daily-builds" tabindex="-1">Daily Builds <a class="header-anchor" href="#daily-builds" aria-label="Permalink to &quot;Daily Builds&quot;">​</a></h2><h3 id="development-stage" tabindex="-1">Development Stage <a class="header-anchor" href="#development-stage" aria-label="Permalink to &quot;Development Stage&quot;">​</a></h3><p>Daily builds are built from the <code>master</code> branch, and this is where all new major feature development happens. The state of master represents either the next minor point release, or a new major version release (depending on the level of change).</p><p>There are no git tags associated with a released daily builds. The released daily build will always match repo HEAD.</p><h3 id="release-stage" tabindex="-1">Release Stage <a class="header-anchor" href="#release-stage" aria-label="Permalink to &quot;Release Stage&quot;">​</a></h3><p>When the decision is made to release a new major/minor version the master branch tends to go through an intial lockdown mode. This is where only important fixes for the release are accepted as pull requests.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>During the lockdown phase, new features are not allowed in master.</p></div><p>Once the level of fixes associated with the release slows down to a low level, a new stable branch is created (at this point the <code>master</code> branch can move forward again as the latest and greatest).</p><p>Fixes continue in the stable branch until it is deemed ready to release (ideally after a short time)! At that point the new stable branch is tagged with the new version tag and the first stable release is made.</p><h2 id="custom-builds" tabindex="-1">Custom Builds <a class="header-anchor" href="#custom-builds" aria-label="Permalink to &quot;Custom Builds&quot;">​</a></h2><p>A proposed strategy for branching on custom builds can be found <a href="./custom_build/GitBranching.html">here</a>.</p>',27),o=[r];function n(h,l,c,d,p,u){return a(),t("div",null,o)}const g=e(i,[["render",n]]);export{b as __pageData,g as default};
