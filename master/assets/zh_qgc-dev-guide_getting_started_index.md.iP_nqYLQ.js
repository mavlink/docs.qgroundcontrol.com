import{_ as l,a as o,b as n,c as r}from"./chunks/qt_project_installer.L-dmXOxq.js";import{_ as d,o as h,c as p,k as t,a as e,t as s,R as a}from"./chunks/framework.O0REyYVi.js";const $=JSON.parse('{"title":"Getting Started with Source and Builds","description":"","frontmatter":{"qt_version":"5.15.2"},"headers":[],"relativePath":"zh/qgc-dev-guide/getting_started/index.md","filePath":"zh/qgc-dev-guide/getting_started/index.md"}'),u={name:"zh/qgc-dev-guide/getting_started/index.md"},c=a('<h1 id="getting-started-with-source-and-builds" tabindex="-1">Getting Started with Source and Builds <a class="header-anchor" href="#getting-started-with-source-and-builds" aria-label="Permalink to &quot;Getting Started with Source and Builds&quot;">​</a></h1><p>本主题说明如何获取QGroundControl源代码并在本机或在Vagrant(虚拟机)环境中构建它。 本主题还提供其他可选功能信息及特定于操作系统的功能信息。 It also provides information about optional or OS specific functionality.</p><h2 id="每日构建" tabindex="-1">每日构建 <a class="header-anchor" href="#每日构建" aria-label="Permalink to &quot;每日构建&quot;">​</a></h2><p>If you just want to test (and not debug) a recent build of <em>QGroundControl</em> you can use the <a href="./../../qgc-user-guide/releases/daily_builds.html">Daily Build</a>. Versions are provided for all platforms.</p><h2 id="源代码" tabindex="-1">源代码 <a class="header-anchor" href="#源代码" aria-label="Permalink to &quot;源代码&quot;">​</a></h2><p><em>QGroundControl</em> 的源代码保存在 github 上，下载地址为: https://github.com/mavlink/qgroundcontrol。 QGroundControl源代码在Apache 2.0和GPLv3下是双许可的。 有关更多信息，请参阅：许可证。 It is <a href="https://github.com/mavlink/qgroundcontrol/blob/master/COPYING.md" target="_blank" rel="noreferrer">dual-licensed under Apache 2.0 and GPLv3</a>.</p><p>要获取源文件, 请执行以下操作:</p><ol><li><p>Clone the repo (or your fork) including submodules:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">克隆存储库</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (或您的分叉), 包括子模块: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--recursive</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/mavlink/qgroundcontrol.git`</span></span></code></pre></div></li><li><p>Update submodules (required each time you pull new source code):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.更新子模块（每次拉新源代码时都这样做）：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule update </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span></span></code></pre></div></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提示：不能使用Github以zip形式下载源文件，因为zip压缩包中不包含相应的子模块源代码。 你必须使用git工具！ You must use git!</p></div><h2 id="构建qgroundcontrol开发环境" tabindex="-1">构建QGroundControl开发环境 <a class="header-anchor" href="#构建qgroundcontrol开发环境" aria-label="Permalink to &quot;构建QGroundControl开发环境&quot;">​</a></h2><h3 id="using-containers" tabindex="-1">Using Containers <a class="header-anchor" href="#using-containers" aria-label="Permalink to &quot;Using Containers&quot;">​</a></h3><p>We support Linux builds using a container found on the source tree of the repository, which can help you develop and deploy the QGC apps without having to install any of the requirements on your local environment.</p><p><a href="./../getting_started/container.html">Container Guide</a></p><h3 id="native-builds" tabindex="-1">Native Builds <a class="header-anchor" href="#native-builds" aria-label="Permalink to &quot;Native Builds&quot;">​</a></h3><p><em>QGroundControl</em> builds are supported for macOS, Linux, Windows, iOS and Android. <em>QGroundControl</em> uses <a href="http://www.qt.io" target="_blank" rel="noreferrer">Qt</a> as its cross-platform support library and uses <a href="http://doc.qt.io/qtcreator/index.html" target="_blank" rel="noreferrer">QtCreator</a> as its default build environment.</p>',15),g=a('<li><p>macOS：v10.11或更高版本</p></li><li><p>Ubuntu：64位，gcc编译器</p></li><li><p><strong>Windows:</strong> Vista or higher, <a href="#vs">Visual Studio 2019 compiler</a> (64 bit)</p></li><li><p>iOS：10.0及更高版本</p></li><li><p><strong>Android:</strong> Android 5.0 and later.</p><ul><li>Standard QGC is built against ndk version 19.</li><li>Java JDK 11 is required.</li></ul></li>',5),k=t("strong",null,"Qt version:",-1),m=t("strong",null,"(only)",-1),b={class:"warning custom-block"},_=t("p",{class:"custom-block-title"},"WARNING",-1),f=t("strong",null,"Do not use any other version of Qt!",-1),C=a('<p>For more information see: <a href="http://doc.qt.io/qt-5/supported-platforms.html" target="_blank" rel="noreferrer">Qt 5 supported platform list</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Native <a href="./../getting_started/cent_os.html">CentOS Builds</a> are also supported, but are documented separately (as the tested environment is different).</p></div><h4 id="vs" tabindex="-1">Install Visual Studio 2019 (Windows Only) <a class="header-anchor" href="#vs" aria-label="Permalink to &quot;Install Visual Studio 2019 (Windows Only) {#vs}&quot;">​</a></h4><p>The Windows compiler can be found here: <a href="https://visualstudio.microsoft.com/vs/older-downloads/" target="_blank" rel="noreferrer">Visual Studio 2019 compiler</a> (64 bit)</p><p>When installing, select <em>Desktop development with C++</em> as shown:</p><p><img src="'+o+'" alt="Visual Studio 2019 - Select Desktop Environment with C++"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Visual Studio is ONLY used to get the compiler. Actually building <em>QGroundControl</em> should be done using <a href="#qt-creator">Qt Creator</a> or <a href="#qmake">qmake</a> as outlined below.</p></div><h4 id="安装qt" tabindex="-1">安装Qt <a class="header-anchor" href="#安装qt" aria-label="Permalink to &quot;安装Qt&quot;">​</a></h4><p>You <strong>need to install Qt as described below</strong> instead of using pre-built packages from say, a Linux distribution, because <em>QGroundControl</em> needs access to private Qt headers.</p><p>To install Qt:</p>',10),v=a('<li><p>下载并运行<a href="http://www.qt.io/download-open-source" target="_blank" rel="noreferrer">Qt Online Installer</a></p><ul><li><strong>Ubuntu:</strong><ul><li>使用以下命令将下载的文件设置为可执行文件：<code>chmod + x</code></li><li>请安装到默认位置, 以便与 <strong>./qgroundcontrol-start.sh</strong> 一起使用。如果将 Qt 安装到非默认位置, 则需要修改 <strong>qgroundcontrol-start.sh</strong> ，才能运行下载的组件。</li></ul></li></ul></li>',1),F=t("em",null,"Select Components",-1),y=a('<div class="info custom-block"><p class="custom-block-title">INFO</p><p>If the version needed is not displayed, check the archive (show archive and refresh).</p></div><p>然后，按如下向导，安装组件:</p><ul><li><strong>Windows</strong>: <em>MSVC 2019 64 bit</em></li><li><strong>MacOS</strong>: <em>macOS</em></li><li><strong>Linux</strong>: <em>Desktop gcc 64-bit</em></li><li>All: <ul><li><em>Qt Charts</em></li><li><em>Android ARMv7</em> (optional, used to build Android)</li></ul></li></ul><p><img src="'+n+'" alt="QtCreator Select Components (Windows)"></p>',4),q=a('<li><p>Install Additional Packages (Platform Specific)</p><ul><li><p><strong>Ubuntu:</strong> <code>sudo apt-get install speech-dispatcher libudev-dev libsdl2-dev patchelf build-essential curl</code></p></li><li><p><strong>Fedora:</strong> <code>sudo dnf install speech-dispatcher SDL2-devel SDL2 systemd-devel patchelf</code></p></li><li><p><strong>Arch Linux:</strong> <code>pacman -Sy speech-dispatcher patchelf</code></p></li><li><p><strong>Android:</strong> <a href="http://doc.qt.io/qt-5/androidgs.html" target="_blank" rel="noreferrer">Qt Android Setup</a></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>JDK11 is required (install if needed)!</p></div></li></ul></li><li><p>Install Optional/OS-Specific Functionality</p><p>Optional features that are dependent on the operating system and user-installed libraries are linked/described below. These features can be forcibly enabled/disabled by specifying additional values to qmake. :::</p><ul><li><ul><li><strong>Video Streaming/Gstreamer:</strong> - see <a href="https://github.com/mavlink/qgroundcontrol/blob/master/src/VideoReceiver/README.md" target="_blank" rel="noreferrer">Video Streaming</a>.</li><li><strong>Airmap SDK:</strong> - TBD.</li></ul></li><li><strong>Airmap SDK:</strong> - TBD.</li></ul></li><li><p>Disable platform-specific optional features that are enabled (but not installed), by default.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This currently applies to Airmap on Linux, which is optional but enabled by default.</p></div><ul><li><p><strong>Ubuntu:</strong></p><ul><li><p>Airmap: Create a file named <strong>user_config.pri</strong> (in the repo root directory) containing the text <code>DEFINES += DISABLE_AIRMAP</code>. This can be done in a bash terminal using the command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">This</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> terminal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> command:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;DEFINES += DISABLE_AIRMAP\\r\\n&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user_config.pri`</span></span></code></pre></div></li></ul></li></ul></li>',3),S=t("h4",{id:"qt-creator",tabindex:"-1"},[e("Building using Qt Creator "),t("a",{class:"header-anchor",href:"#qt-creator","aria-label":'Permalink to "Building using Qt Creator {#qt-creator}"'},"​")],-1),B=t("li",null,[t("p",null,[e("Launch "),t("em",null,"Qt Creator"),e(" and open the "),t("strong",null,"qgroundcontrol.pro"),e(" project.")])],-1),T=t("p",null,[e("In the "),t("strong",null,"Projects"),e(" section, select the appropriate kit for your needs:")],-1),w=t("strong",null,"OSX:",-1),A=t("div",{class:"info custom-block"},[t("p",{class:"custom-block-title"},"INFO"),t("p",null,[e("iOS builds must be built using "),t("a",{href:"http://doc.qt.io/qt-5/ios-support.html",target:"_blank",rel:"noreferrer"},"XCode"),e(".")])],-1),I=t("strong",null,"Ubuntu:",-1),E=t("strong",null,"Windows:",-1),Q=t("strong",null,"64bit",-1),P=t("strong",null,"Android:",-1),D=t("ul",null,[t("li",null,[e("JDK11 is required. You can confirm it is being used by reviewing the project setting: "),t("strong",null,[e("Projects > Manage Kits > Devices > Android (tab) > Android Settings > "),t("em",null,"JDK location")]),e(".")])],-1),G=t("li",null,[t("p",null,'Build using the "hammer" (or "play") icons:'),t("p",null,[t("img",{src:l,alt:"QtCreator Build Button"})])],-1),V=a('<h4 id="qmake" tabindex="-1">Build using qmake on CLI <a class="header-anchor" href="#qmake" aria-label="Permalink to &quot;Build using qmake on CLI {#qmake}&quot;">​</a></h4><p>Example commands to build a default QGC and run it afterwards:</p><ol><li><p>Make sure you cloned the repository and updated the submodules before, see chapter <em>Source Code</em> above and switch into the repository folder: <code>cd qgroundcontrol</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qgroundcontrol</span></span></code></pre></div></li><li><p>Create and enter a shadow build directory:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li><li><p>Configure the build using the qmake script in the root of the repository: <code>qmake ../</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">入门指南</span></span></code></pre></div></li><li><p>Run make to compile and link. To accelerate the process things you can use the <code>-j{number of threads}</code> parameter.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can also specify build time flags here. For example, you could disable airmap inclusion using the command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DEFINES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DISABLE_AIRMAP</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></div></li><li><p>Run the QGroundcontrol binary that was just built: <code>./staging/QGroundControl</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./staging/QGroundControl</span></span></code></pre></div></li></ol><h3 id="vagrant" tabindex="-1">Vagrant <a class="header-anchor" href="#vagrant" aria-label="Permalink to &quot;Vagrant&quot;">​</a></h3><p><a href="https://www.vagrantup.com/" target="_blank" rel="noreferrer">Vagrant</a> can be used to build and run <em>QGroundControl</em> within a Linux virtual machine (the build can also be run on the host machine if it is compatible).</p><ol><li><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noreferrer">Download</a> and <a href="https://www.vagrantup.com/docs/getting-started/" target="_blank" rel="noreferrer">Install</a> Vagrant</li><li>From the root directory of the <em>QGroundControl</em> repository run <code>vagrant up</code></li><li>To use the graphical environment run <code>vagrant reload</code></li></ol><h3 id="additional-build-notes-for-all-supported-os" tabindex="-1">Additional Build Notes for all Supported OS <a class="header-anchor" href="#additional-build-notes-for-all-supported-os" aria-label="Permalink to &quot;Additional Build Notes for all Supported OS&quot;">​</a></h3><ul><li><strong>Parallel builds:</strong> For non Windows builds, you can use the <code>-j#</code> option to run parellel builds.</li><li><strong>Location of built files:</strong> Individual build file results can be found in the <code>build_debug</code> or <code>build_release</code> directories. The built executable can be found in the <code>debug</code> or <code>release</code> directory.</li><li><strong>If you get this error when running <em>QGroundControl</em></strong>: <code>/usr/lib/x86_64-linux-gnu/libstdc++.so.6: version &#39;GLIBCXX_3.4.20&#39; not found.</code>, you need to either update to the latest <em>gcc</em>, or install the latest <em>libstdc++.6</em> using: <code>sudo apt-get install libstdc++6</code>.</li><li><strong>Unit tests:</strong> To run the <a href="./../contribute/unit_tests.html">unit tests</a>, build in <code>debug</code> mode with <code>UNITTEST_BUILD</code> definition, and then copy <code>deploy/qgroundcontrol-start.sh</code> script into the <code>debug</code> directory before running the tests.</li></ul><h2 id="building-qgc-installation-files" tabindex="-1">Building QGC Installation Files <a class="header-anchor" href="#building-qgc-installation-files" aria-label="Permalink to &quot;Building QGC Installation Files&quot;">​</a></h2><p>You can additionally create installation file(s) for <em>QGroundControl</em> as part of the normal build process.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>On Windows you will need to first install <a href="https://sourceforge.net/projects/nsis/" target="_blank" rel="noreferrer">NSIS</a>.</p></div><p>To add support for installation file creation you need to add <code>CONFIG+=installer</code> to your project file, or when you call <em>qmake</em>.</p><p>To do this in <em>Qt Creator</em>:</p><ul><li>Open <strong>Projects &gt; Build &gt; Build Steps &gt; qmake &gt; Additional arguments</strong>.</li><li>Enter <code>CONFIG+=installer</code> as shown: <img src="'+r+'" alt="Installer"></li></ul>',14);function N(i,O,x,L,R,j){return h(),p("div",null,[c,t("ul",null,[g,t("li",null,[t("p",null,[k,e(" "+s(i.$frontmatter.qt_version)+" ",1),m]),t("div",b,[_,t("p",null,[f,e(" QGC has been thoroughly tested with the specified version of Qt ("+s(i.$frontmatter.qt_version)+"). There is a significant risk that other Qt versions will inject bugs that affect stability and safety (even if QGC compiles).",1)])])])]),C,t("ol",null,[v,t("li",null,[t("p",null,[e("In the installer "),F,e(" dialog choose: "+s(i.$frontmatter.qt_version)+".",1)]),y]),q]),S,t("ol",null,[B,t("li",null,[T,t("ul",null,[t("li",null,[t("p",null,[w,e(" Desktop Qt "+s(i.$frontmatter.qt_version)+" clang 64 bit",1)]),A]),t("li",null,[t("p",null,[I,e(" Desktop Qt "+s(i.$frontmatter.qt_version)+" GCC 64bit",1)])]),t("li",null,[t("p",null,[E,e(" Desktop Qt "+s(i.$frontmatter.qt_version)+" MSVC2019 ",1),Q])]),t("li",null,[t("p",null,[P,e(" Android for armeabi-v7a (GCC 4.9, Qt "+s(i.$frontmatter.qt_version)+")",1)]),D])])]),G]),V])}const M=d(u,[["render",N]]);export{$ as __pageData,M as default};
