import{_ as t,c as a,o,ag as r}from"./chunks/framework.BudlMBKT.js";const h=JSON.parse('{"title":"MAVLink Customisation","description":"","frontmatter":{},"headers":[],"relativePath":"tr/qgc-dev-guide/custom_build/mavlink.md","filePath":"tr/qgc-dev-guide/custom_build/mavlink.md"}'),i={name:"tr/qgc-dev-guide/custom_build/mavlink.md"};function n(l,e,s,m,u,d){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="mavlink-customisation" tabindex="-1">MAVLink Customisation <a class="header-anchor" href="#mavlink-customisation" aria-label="Permalink to &quot;MAVLink Customisation&quot;">â€‹</a></h1><p>QGC communicates with flight stacks using <a href="https://mavlink.io/en/" target="_blank" rel="noreferrer">MAVLink</a>, a very lightweight messaging protocol that has been designed for the drone ecosystem.</p><p>QGC includes the <a href="https://mavlink.io/en/messages/all.html" target="_blank" rel="noreferrer">all.xml</a> dialect by default. The <code>all.xml</code> includes all other dialects in the <a href="https://github.com/mavlink/mavlink/tree/master/message_definitions/v1.0" target="_blank" rel="noreferrer">mavlink/mavlink</a> repository, and allows it to communicate with both PX4 and Ardupilot. Previous versions of QGC (v4.2.8 and earlier), used the <code>ArduPilotMega.xml</code> dialect.</p><p>In order to add support for a new set of messages you should add them to <a href="https://mavlink.io/en/messages/development.html" target="_blank" rel="noreferrer">development.xml</a>, <a href="https://mavlink.io/en/messages/ardupilotmega.html" target="_blank" rel="noreferrer">ArduPilotMega.xml</a>, or <a href="https://mavlink.io/en/messages/common.html" target="_blank" rel="noreferrer">common.xml</a> (for PX4), or fork <em>QGroundControl</em> and include your own dialect.</p><p>To modify the version of MAVLink used by QGC:</p><ul><li>Update the CMake MAVLink Options in <a href="https://github.com/mavlink/qgroundcontrol/tree/master/cmake/CustomOptions.cmake" target="_blank" rel="noreferrer">/qgroundcontrol/cmake/CustomOptions.cmake</a> or when using the built-in custom build support you can override these options in <a href="https://github.com/mavlink/qgroundcontrol/tree/master/custom-example/cmake/CustomOverrides.cmake" target="_blank" rel="noreferrer">/qgroundcontrol/custom/cmake/CustomOverrides.cmake</a>. <ul><li>QGC_MAVLINK_GIT_REPO - This is a link to the git repo to use, by default this is a link to <a href="https://github.com/mavlink/c_library_v2" target="_blank" rel="noreferrer">https://github.com/mavlink/c_library_v2</a>. You can also <a href="https://mavlink.io/en/getting_started/generate_libraries.html" target="_blank" rel="noreferrer">build your own libraries</a> using the MAVLink toolchain and upload to your own git repo.</li><li>QGC_MAVLINK_GIT_TAG - This points to the git tag you would like to use in the chosen repo. This should likely be updated on occasion to use the latest version of MAVLink.</li></ul></li><li>You can also set the mavlink directory to a local path by using the CMake variable CPM_mavlink_SOURCE.</li></ul>',6)]))}const k=t(i,[["render",n]]);export{h as __pageData,k as default};
