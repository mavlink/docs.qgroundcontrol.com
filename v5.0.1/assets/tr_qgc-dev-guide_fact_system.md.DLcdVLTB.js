import{_ as t,c as e,o,ag as c}from"./chunks/framework.Dne1pdn_.js";const p=JSON.parse('{"title":"Fact System","description":"","frontmatter":{},"headers":[],"relativePath":"tr/qgc-dev-guide/fact_system.md","filePath":"tr/qgc-dev-guide/fact_system.md"}'),r={name:"tr/qgc-dev-guide/fact_system.md"};function i(s,a,n,d,u,l){return o(),e("div",null,a[0]||(a[0]=[c('<h1 id="fact-system" tabindex="-1">Fact System <a class="header-anchor" href="#fact-system" aria-label="Permalink to &quot;Fact System&quot;">​</a></h1><p>The Fact System provides a set of capabilities which standardizes and simplifies the creation of the QGC user interface.</p><h2 id="fact" tabindex="-1">Fact <a class="header-anchor" href="#fact" aria-label="Permalink to &quot;Fact {#fact}&quot;">​</a></h2><p>A Fact represents a single value within the system.</p><h2 id="factmetadata" tabindex="-1">FactMetaData <a class="header-anchor" href="#factmetadata" aria-label="Permalink to &quot;FactMetaData&quot;">​</a></h2><p>There is <code>FactMetaData</code> associated with each fact. It provides details on the Fact in order to drive automatic user interface generation and validation.</p><h2 id="fact-controls" tabindex="-1">Fact Controls <a class="header-anchor" href="#fact-controls" aria-label="Permalink to &quot;Fact Controls&quot;">​</a></h2><p>A Fact Control is a QML user interface control which connects to a Fact and it&#39;s <code>FactMetaData</code> to provide a control to the user to modify/display the value associated with the Fact.</p><h2 id="factgroup" tabindex="-1">FactGroup <a class="header-anchor" href="#factgroup" aria-label="Permalink to &quot;FactGroup&quot;">​</a></h2><p>A <em>Fact Group</em> is a group of <a href="#fact">Facts</a>. It is used to organise facts and manage user defined facts.</p><h2 id="custom-build-support" tabindex="-1">Custom Build Support <a class="header-anchor" href="#custom-build-support" aria-label="Permalink to &quot;Custom Build Support&quot;">​</a></h2><p>User defined facts can be added by overriding <code>factGroups</code> function of <code>FirmwarePlugin</code> in a custom firmware plugin class. These functions return a name to fact group map that is used to identify added fact groups. A custom fact group can be added by extending <code>FactGroup</code> class. FactMetaDatas could be defined using the appopriate <code>FactGroup</code> constructor by providing a json file containing necessery information.</p><p>Changing the metadata of existing facts is also possible by overriding <code>adjustMetaData</code> of <code>FirmwarePlugin</code> class.</p><p>A fact associated with a vehicle (including facts belonging to fact groups returned in <code>factGroups</code> function of the vehicles Firmware plugin) can be reached using <code>getFact(&quot;factName&quot;)</code> or <code>getFact(&quot;factGroupName.factName&quot;)</code></p><p>For additional information please refer to comments in <a href="https://github.com/mavlink/qgroundcontrol/blob/v4.0.8/src/FirmwarePlugin/FirmwarePlugin.h" target="_blank" rel="noreferrer">FirmwarePlugin.h</a>.</p>',15)]))}const h=t(r,[["render",i]]);export{p as __pageData,h as default};
