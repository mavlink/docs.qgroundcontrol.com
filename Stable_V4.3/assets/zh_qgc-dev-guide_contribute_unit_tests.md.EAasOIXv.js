import{_ as t,o as e,c as o,R as s}from"./chunks/framework.2JVau0y1.js";const f=JSON.parse('{"title":"单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"zh/qgc-dev-guide/contribute/unit_tests.md","filePath":"zh/qgc-dev-guide/contribute/unit_tests.md"}'),i={name:"zh/qgc-dev-guide/contribute/unit_tests.md"},n=s('<h1 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h1><p><em>QGroundControl</em> (QGC) contains a set of unit tests that must pass before a pull request will be accepted. 向QGC添加新的复杂子系统应该有相应的新单元测试来测试它。</p><p>单元测试的完整列表可以在UnitTestList.cc中找到。</p><p>要运行单元测试：</p><ol><li>使用UNITTEST_BUILD定义在调试模式下构建。</li><li>复制debug目录中的deploy / qgroundcontrol-start.sh脚本</li><li>使用--unittest命令行选项从命令行运行所有单元测试。 对于Linux，这是完成如下所示： <code>qgroundcontrol-start.sh --unittest</code></li><li>通过指定测试名称来运行单个单元测试： - unittest：RadioConfigTest。 对于Linux，这是完成如下所示： <code>qgroundcontrol-start.sh --unittest:RadioConfigTest</code></li></ol>',5),a=[n];function r(c,d,l,u,_,p){return e(),o("div",null,a)}const g=t(i,[["render",r]]);export{f as __pageData,g as default};
