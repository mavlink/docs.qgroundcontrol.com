import{_ as i,c as e,o as a,ag as t}from"./chunks/framework.Do75ItRy.js";const m=JSON.parse('{"title":"Toolbar Customization","description":"","frontmatter":{},"headers":[],"relativePath":"zh/qgc-dev-guide/custom_build/toolbar.md","filePath":"zh/qgc-dev-guide/custom_build/toolbar.md"}'),r={name:"zh/qgc-dev-guide/custom_build/toolbar.md"};function n(l,o,s,d,c,h){return a(),e("div",null,o[0]||(o[0]=[t('<h1 id="toolbar-customization" tabindex="-1">Toolbar Customization <a class="header-anchor" href="#toolbar-customization" aria-label="Permalink to &quot;Toolbar Customization&quot;">​</a></h1><p>The toolbar can be customized in a number of ways to fit your custom build needs. The toolbar internally is made up of a number of sections from left to right:</p><ul><li>View Switching</li><li>Indicators <ul><li>App Indicators</li><li>Vehicle Indicators</li><li>Vehicle Mode Indicators</li></ul></li><li>Connection Management</li><li>Branding</li></ul><p>The Indicator section varies based on the view currently displayed:</p><ul><li>Fly View - Shows all indicators</li><li>Plan View - Show no indicators and has its own custom indicator section for Plan status values</li><li>Other Views - Do not show Vehicle Mode Indicators</li></ul><h2 id="customization-possibilities" tabindex="-1">Customization Possibilities <a class="header-anchor" href="#customization-possibilities" aria-label="Permalink to &quot;Customization Possibilities&quot;">​</a></h2><h3 id="indicators" tabindex="-1">Indicators <a class="header-anchor" href="#indicators" aria-label="Permalink to &quot;Indicators&quot;">​</a></h3><p>You can add your own indicators for display or remove any of the upstream indicators. The mechanism you use depends on the indicator type.</p><h4 id="app-indicators" tabindex="-1">App Indicators <a class="header-anchor" href="#app-indicators" aria-label="Permalink to &quot;App Indicators&quot;">​</a></h4><p>These provide information to the user which is not associated with a vehicle. For example RTK status. To manipulate the list of app indicators you use <code>QGCPlugin::toolbarIndicators</code>.</p><h4 id="vehicle-indicators" tabindex="-1">Vehicle Indicators <a class="header-anchor" href="#vehicle-indicators" aria-label="Permalink to &quot;Vehicle Indicators&quot;">​</a></h4><p>These are indicators which are associated with information about the vehicle. They are only available when a vehicle is connected. To manipulate the list of vehicle indicators you override <code>FirmwarePlugin::toolIndicators</code>.</p><h4 id="vehicle-mode-indicators" tabindex="-1">Vehicle Mode Indicators <a class="header-anchor" href="#vehicle-mode-indicators" aria-label="Permalink to &quot;Vehicle Mode Indicators&quot;">​</a></h4><p>These are indicators which are associated with information about the vehicle. They require additional UI provided by the Fly View to complete their actions. 一个例子是“解锁与上锁” 。 They are only available when a vehicle is connected. To manipulate the list of vehicle mode indicators you override <code>FirmwarePlugin::modeIndicators</code>.</p><h3 id="modifying-the-toolbar-ui-itself" tabindex="-1">Modifying the toolbar UI itself <a class="header-anchor" href="#modifying-the-toolbar-ui-itself" aria-label="Permalink to &quot;Modifying the toolbar UI itself&quot;">​</a></h3><p>This is accomplished by using resource overrides on the qml files associated with the toolbar. This provides a high level of customization but also a higher level of complexity. The primary ui for the toolbar is in <code>MainToolBar.qml</code>. The main window code in <code>MainRootWindow.qml</code> interacts with the toolbar to show different indicator sections based on current view as well as whether the mode indicators show or not also based on current view.</p><p>If you want full control over the toolbar then you can override <code>MainToolBar.qml</code> and make your own completely different version. You will need to pay special attention to the interactions of the main toolbar with <code>MainRootWindow.qml</code> since you are going to need to replicated those interactions in your own custom version.</p><p>There are two standard indicator ui sections of the toolbar:</p><h4 id="maintoolbarindicators-qml" tabindex="-1"><code>MainToolBarIndicators.qml</code> <a class="header-anchor" href="#maintoolbarindicators-qml" aria-label="Permalink to &quot;`MainToolBarIndicators.qml`&quot;">​</a></h4><p>This is used for all views except Plan. It display all the indicators in a row. Although you can override this file, in reality it doesn&#39;t do much other than layout for indicators.</p><h4 id="plantoolbarindicators-qml" tabindex="-1"><code>PlanToolBarIndicators.qml</code> <a class="header-anchor" href="#plantoolbarindicators-qml" aria-label="Permalink to &quot;`PlanToolBarIndicators.qml`&quot;">​</a></h4><p>This is used by the Plan view to show the status values. If you want to change that ui you can override this file and provide your own custom version.</p>',22)]))}const p=i(r,[["render",n]]);export{m as __pageData,p as default};
