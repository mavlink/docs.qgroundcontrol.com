import{_ as a,c as t,o as r,ag as o}from"./chunks/framework.Do75ItRy.js";const u=JSON.parse('{"title":"自定义构建的初始仓库设置","description":"","frontmatter":{},"headers":[],"relativePath":"zh/qgc-dev-guide/custom_build/create_repos.md","filePath":"zh/qgc-dev-guide/custom_build/create_repos.md"}'),i={name:"zh/qgc-dev-guide/custom_build/create_repos.md"};function c(d,e,s,_,n,p){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="自定义构建的初始仓库设置" tabindex="-1">自定义构建的初始仓库设置 <a class="header-anchor" href="#自定义构建的初始仓库设置" aria-label="Permalink to &quot;自定义构建的初始仓库设置&quot;">​</a></h1><p>所建议的处理QGC 和自定义的 QGC 版本的机制是有两个单独的仓库。 第一个仓库是你主要的 QGC 分支。 第二个仓库是你的自定义构建仓库。</p><h2 id="主要的-qgc-存储库" tabindex="-1">主要的 QGC 存储库 <a class="header-anchor" href="#主要的-qgc-存储库" aria-label="Permalink to &quot;主要的 QGC 存储库&quot;">​</a></h2><p>此插件用于处理主QGC的更改。 在创建自己的自定义构建时，发现可能需要对自定义构建进行调整或添加内容以实现所需功能，这种情况并不少见。 通过与QGC开发人员直接讨论这些必要的更改，并提交拉取请求以使自定义构建架构更完善，你能让QGC对所有人来说都更强大，同时也为社区做出了贡献。</p><p>创建此仓库的最佳方式是将常规的 QGC 仓库 fork 到您自己的 GitHub 帐户。</p><h2 id="自定义构建仓库" tabindex="-1">自定义构建仓库 <a class="header-anchor" href="#自定义构建仓库" aria-label="Permalink to &quot;自定义构建仓库&quot;">​</a></h2><p>这是您的主要自定义构建开发领域。 此处所有更改都应在自定义目录内进行，而不应扩散到常规的QGC代码库中。</p><p>由于你只能对一个代码仓库fork一次，创建此代码仓库的方法是在你的GitHub账户中 “创建一个新的代码仓库”。 不要向它添加任何其他文件，如gitignore, readme等。 一旦创建，您将被赋予设置仓库的选项。 现在您可以选择“从另一个仓库导入代码”。 只需使用&quot;导入代码&quot;按钮导入常规的 QGC 仓库 。</p>',8)]))}const h=a(i,[["render",c]]);export{u as __pageData,h as default};
