import{_ as a,c as i,o as r,ag as t}from"./chunks/framework.Do75ItRy.js";const u=JSON.parse('{"title":"插件架构","description":"","frontmatter":{},"headers":[],"relativePath":"zh/qgc-dev-guide/firmware_plugin.md","filePath":"zh/qgc-dev-guide/firmware_plugin.md"}'),o={name:"zh/qgc-dev-guide/firmware_plugin.md"};function n(l,e,c,d,p,s){return r(),i("div",null,e[0]||(e[0]=[t('<h1 id="插件架构" tabindex="-1">插件架构 <a class="header-anchor" href="#插件架构" aria-label="Permalink to &quot;插件架构&quot;">​</a></h1><p>尽管 MAVLink 规范定义了与载具通信的标准通信协议。 这个规范在许多方面需要固件开发者来解释。 由于这种情况，在许多情况下，为完成相同任务，与运行一种固件的载具进行通信，和与运行不同固件的载具进行通信，二者会略有差异。 此外，每个固件可能实现一个不同的 MAVLink 命令集的子集。</p><p>另一个主要问题是MAVLink规范不包括载具配置或通用参数集。 Due to this all code which relates to vehicle setup ends up being firmware specific. 正因如此，所有与载具配置相关的代码最终都具有固件特定性。 此外，任何必须引用特定参数的代码也是特定于固件的。</p><p>鉴于固件实现之间的所有这些差异，创建单个地面站应用程序可能非常棘手，可以支持每个应用程序而不会使代码库降级为基于载具使用的固件在任何地方遍布的大量if / then / else语句。</p><p>QGC 使用插件架构将固件特定代码与通用至所有固件的代码隔离开来。 这主要由 <code>FirmwarePlugin</code> 和 <code>AutoPilotPlugin</code> 来完成。</p><p>此插件架构也被自定义构建用来允许在标准的 QGC 能够提供的情况下进行进一步的自定义操作。</p><h2 id="固件插件" tabindex="-1">固件插件 <a class="header-anchor" href="#固件插件" aria-label="Permalink to &quot;固件插件&quot;">​</a></h2><p>这是用来创建通向Mavlink中通常不标准化的部分的标准接口。</p><h2 id="自动驾驶插件" tabindex="-1">自动驾驶插件 <a class="header-anchor" href="#自动驾驶插件" aria-label="Permalink to &quot;自动驾驶插件&quot;">​</a></h2><p>这用于为载具安装提供用户界面。</p><h2 id="qgc核心插件" tabindex="-1">QGC核心插件 <a class="header-anchor" href="#qgc核心插件" aria-label="Permalink to &quot;QGC核心插件&quot;">​</a></h2><p>这用于通过标准接口展示 QGC 应用程序本身与载具无关的功能。 然后由自定义构建来根据他们的需要调整 QGC 功能。</p>',12)]))}const _=a(o,[["render",n]]);export{u as __pageData,_ as default};
