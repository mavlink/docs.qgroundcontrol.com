import{_ as a,a as t,b as n}from"./chunks/qt_setup.R_ZAv8o9.js";import{_ as s,c as o,o as i,ag as l}from"./chunks/framework.CUuwVmIT.js";const v=JSON.parse('{"title":"Using QGC on CentOS 7","description":"","frontmatter":{},"headers":[],"relativePath":"ko/qgc-dev-guide/getting_started/cent_os.md","filePath":"ko/qgc-dev-guide/getting_started/cent_os.md"}'),r={name:"ko/qgc-dev-guide/getting_started/cent_os.md"};function p(d,e,c,h,u,g){return i(),o("div",null,e[0]||(e[0]=[l('<h1 id="using-qgc-on-centos-7" tabindex="-1">Using QGC on CentOS 7 <a class="header-anchor" href="#using-qgc-on-centos-7" aria-label="Permalink to &quot;Using QGC on CentOS 7&quot;">​</a></h1><h2 id="os-installation" tabindex="-1">OS Installation <a class="header-anchor" href="#os-installation" aria-label="Permalink to &quot;OS Installation&quot;">​</a></h2><p>To install CentOS 7:</p><ol><li>Fetch the latest <a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso" target="_blank" rel="noreferrer">CentOS 7 ISO from here</a></li><li>Make a bootable USB stick out of the ISO e.g. by <a href="https://linuxize.com/post/how-to-create-a-bootable-centos-7-usb-stick/" target="_blank" rel="noreferrer">following this guide</a>.</li><li>Boot the target device from the stick.</li></ol><p>The following examples show how to boot the target device from the stick.</p><p><strong>Example:</strong> <em>Panasonic Toughpad FZ-M1</em> (attaching a keyboard and mouse to the device to follow this guide is recommended).</p><ol><li>Enter the BIOS menu by holding <strong>Delete</strong> on an attached USB keyboard or pressing all hardware buttons around the power button during boot.</li><li>Once inside the BIOS switch to the <em>Exit</em> tab using the arrow keys or the touchscreen.</li><li>Select your previously created and plugged in USB stick under Boot device override.</li></ol><p><strong>Example</strong> <a href="https://www.uavcomp.com/command-control/micronav/" target="_blank" rel="noreferrer">UAV Components Micronav</a> device:</p><ol><li>The setup of CentOS will not start with the default configuration. To solve this <ol><li>Go to the BIOS menu as explained in the example above.</li><li>Disable the &quot;Extension Port&quot; device under the &quot;Advanced&quot; tab.</li><li>&quot;Exit and save&quot; the BIOS menu on the Exit page of the BIOS and try again.</li><li>After CentOS is installed, you revert the changes again so that the Microhard network works.</li></ol></li><li>Make sure to never do a warm reboot but always first shut down the device if you want to reboot into Linux. Otherwise the Microhard network adapter will not work properly and slows down the whole system.</li></ol><h3 id="centos-software-selection-installation-options" tabindex="-1">CentOS Software Selection Installation Options <a class="header-anchor" href="#centos-software-selection-installation-options" aria-label="Permalink to &quot;CentOS Software Selection Installation Options&quot;">​</a></h3><p>These were the options used to setup a CentOS development system. Use it as a guideline.</p><p><img src="'+a+'" alt="CentOS Installation"></p><p><img src="'+t+`" alt="CentOS Software Selection"></p><h3 id="update-gstreamer" tabindex="-1">Update GStreamer <a class="header-anchor" href="#update-gstreamer" aria-label="Permalink to &quot;Update GStreamer&quot;">​</a></h3><p>Once CentOS is installed and booted we need to set up the environment for QGC. First, we need to update GStreamer to a more recent version. This guide follows Alice Wonder&#39;s tips found here: https://media.librelamp.com</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo yum install epel-release -y</span></span>
<span class="line"><span>wget http://awel.domblogger.net/7/media/x86_64/awel-media-release-7-6.noarch.rpm</span></span>
<span class="line"><span>sudo yum localinstall awel-media-release-7-6.noarch.rpm -y</span></span>
<span class="line"><span>sudo yum clean all</span></span>
<span class="line"><span>sudo yum update</span></span>
<span class="line"><span>sudo yum install gstreamer1* --skip-broken -y</span></span></code></pre></div><p><strong>Note:</strong> Make sure these are installed (vaapi for Intel GPUs)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo yum install gstreamer1-vaapi</span></span>
<span class="line"><span>sudo yum install gstreamer1-libav</span></span></code></pre></div><p><strong>Note:</strong> Install these to enable hardware accelerated video decoding</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo yum install libva</span></span>
<span class="line"><span>sudo yum install libva-utils</span></span>
<span class="line"><span>sudo yum install libva-intel-driver</span></span></code></pre></div><p>If libva-intel-driver is not found you can download it and install it manually</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>wget http://download1.rpmfusion.org/free/el/updates/7/x86_64/l/libva-intel-driver-1.8.3-4.el7.x86_64.rpm</span></span>
<span class="line"><span>sudo yum localinstall libva-intel-driver-1.8.3-4.el7.x86_64.rpm -y</span></span></code></pre></div><h3 id="installing-sdl2" tabindex="-1">Installing SDL2 <a class="header-anchor" href="#installing-sdl2" aria-label="Permalink to &quot;Installing SDL2&quot;">​</a></h3><p>SDL2 is used for joystick support.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo yum install SDL2 SDL2-devel -y</span></span></code></pre></div><h3 id="update-kernel-optional" tabindex="-1">Update Kernel (optional) <a class="header-anchor" href="#update-kernel-optional" aria-label="Permalink to &quot;Update Kernel (optional)&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If your Joystick gets recognized and shows up as <code>/dev/input/js0</code> when you run the command <code>/dev/input/*</code> you can skip this step.</p></div><p>We recommend updating the kernel for:</p><ul><li>Better touch screen responsiveness.</li><li>Correct recognition of some USB devices - in particular joysticks.</li></ul><p>The following joysticks are known not do work out of the box with the default CentOS 7 kernel (3.10.0):</p><ul><li>Logitech F310</li><li>Microsoft Xbox 360 controller (USB)</li></ul><p>To fix the joystick not being recognized (even if the same unit is working under Windows or Ubuntu) please <a href="https://www.howtoforge.com/tutorial/how-to-upgrade-kernel-in-centos-7-server/" target="_blank" rel="noreferrer">follow this guide to update the kernel</a>.</p><p>Here&#39;s a short summary of the commands that you need to execute to update the kernel:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></span>
<span class="line"><span>sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></span>
<span class="line"><span>sudo yum --enablerepo=elrepo-kernel install kernel-ml -y</span></span></code></pre></div><p>Reboot your device afterwards and make sure the new kernel version shows up as the default start option in the GRUB menu on boot.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You might need to disable secure boot in the BIOS to allow the new kernel to be booted.</p></div><h2 id="running-qgc-on-centos" tabindex="-1">Running QGC on CentOS <a class="header-anchor" href="#running-qgc-on-centos" aria-label="Permalink to &quot;Running QGC on CentOS&quot;">​</a></h2><p>Before launching QGC, you need to make sure the current user has access to the dialout group (serial port access permission):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo usermod -a -G dialout $USER</span></span></code></pre></div><h3 id="firewall" tabindex="-1">Firewall <a class="header-anchor" href="#firewall" aria-label="Permalink to &quot;Firewall&quot;">​</a></h3><p>The default firewall security level of Red Hat distributions like CentOS block MAVLink communication and also the camera video stream. So you need to create rules to open the incoming ports for MAVLink and camera stream. For non-production local environment testing purposes ONLY you can temporarily disable the firewall using the following commands (<a href="https://www.liquidweb.com/kb/how-to-stop-and-disable-firewalld-on-centos-7/" target="_blank" rel="noreferrer">from here</a>):</p><p>Temporary:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl stop firewalld</span></span></code></pre></div><p>Permanent (at your own risk):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl disable firewalld</span></span></code></pre></div><p>Undo permanent change:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl enable firewalld</span></span></code></pre></div><h3 id="connection-problems-with-multiple-networks" tabindex="-1">Connection problems with multiple networks <a class="header-anchor" href="#connection-problems-with-multiple-networks" aria-label="Permalink to &quot;Connection problems with multiple networks&quot;">​</a></h3><p>In our test with CentOS we had problems when connecting to multiple networks through multiple network devices even with appropriate IP address and subnet assignment.</p><p>Issues consisted of:</p><ul><li>Losing Internet access when connecting to a second network</li><li>Having flaky connection to the vehicle with a lot of hiccups and packet losses (e.g. 30 seconds perfect connection 4 seconds of packet loss in a regular pattern)</li></ul><p>If you face any of these problems avoid them by only connecting one network at a time e.g. switching between WiFi and Microhard.</p><h3 id="executing-a-prebuilt-qgc-binary" tabindex="-1">Executing a Prebuilt QGC Binary <a class="header-anchor" href="#executing-a-prebuilt-qgc-binary" aria-label="Permalink to &quot;Executing a Prebuilt QGC Binary&quot;">​</a></h3><ul><li>Get hold of an archive containing a prebuilt binary of QGC for CentOS. At the moment there is no automatic deployment for this build if you urgently need one get in touch with the developers.</li><li><a href="https://www.hostdime.com/kb/hd/command-line/how-to-tar-untar-and-zip-files" target="_blank" rel="noreferrer">Unpack the archive</a>.</li><li>Go inside the unpacked files and locate the script named <code>qgroundcontrol-run.sh</code></li><li>Run it by executing the command<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./qgroundcontrol-run.sh</span></span></code></pre></div></li></ul><h2 id="building-qgc-on-centos" tabindex="-1">Building QGC on CentOS <a class="header-anchor" href="#building-qgc-on-centos" aria-label="Permalink to &quot;Building QGC on CentOS&quot;">​</a></h2><h3 id="installing-qt" tabindex="-1">Installing Qt <a class="header-anchor" href="#installing-qt" aria-label="Permalink to &quot;Installing Qt&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir ~/devel</span></span>
<span class="line"><span>cd ~/devel</span></span></code></pre></div><p>Install Qt 5.12.4 from the Qt installation script that can be downloaded <a href="https://www.qt.io/download-thank-you?os=linux&amp;hsLang=en" target="_blank" rel="noreferrer">here</a>. Once downloaded, make it executable and run it:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>chmod +x qt-unified-linux-x64-3.1.1-online.run</span></span>
<span class="line"><span>./qt-unified-linux-x64-3.1.1-online.run</span></span></code></pre></div><p>Select the following options and install it under <code>~/devel/Qt</code>:</p><p><img src="`+n+`" alt="Qt Software Selection"></p><h3 id="clone-and-build-qgc" tabindex="-1">Clone and Build QGC <a class="header-anchor" href="#clone-and-build-qgc" aria-label="Permalink to &quot;Clone and Build QGC&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone --recursive https://github.com/mavlink/qgroundcontrol.git</span></span>
<span class="line"><span>mkdir build</span></span>
<span class="line"><span>cd build</span></span></code></pre></div><p>For a debug/test build:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>../Qt/5.12.4/gcc_64/bin/qmake ../qgroundcontrol/qgroundcontrol.pro -spec linux-g++ CONFIG+=debug</span></span></code></pre></div><p>For a release build:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>../Qt/5.12.4/gcc_64/bin/qmake ../qgroundcontrol/qgroundcontrol.pro -spec linux-g++ CONFIG+=qtquickcompiler</span></span></code></pre></div><p>Build it:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>make -j4</span></span></code></pre></div><p>You can alternatively launch <em>QtCreator</em> (found under <code>~/devel/Qt/Tools/QtCreator/bin/qtcreator</code>), load the <code>qgroundcontro.pro</code> project and build/debug from within its IDE.</p><p>By default, this will build the regular QGC. To build the sample, customized UI version, follow <a href="https://github.com/mavlink/qgroundcontrol/blob/master/custom-example/README.md" target="_blank" rel="noreferrer">these instructions</a>.</p>`,71)]))}const k=s(r,[["render",p]]);export{v as __pageData,k as default};
