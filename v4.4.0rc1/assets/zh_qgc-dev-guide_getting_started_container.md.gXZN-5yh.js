import{_ as e,o as i,c as t,R as a}from"./chunks/framework.DhMxou8O.js";const b=JSON.parse('{"title":"Building using Containers","description":"","frontmatter":{},"headers":[],"relativePath":"zh/qgc-dev-guide/getting_started/container.md","filePath":"zh/qgc-dev-guide/getting_started/container.md"}'),o={name:"zh/qgc-dev-guide/getting_started/container.md"},s=a('<h1 id="building-using-containers" tabindex="-1">Building using Containers <a class="header-anchor" href="#building-using-containers" aria-label="Permalink to &quot;Building using Containers&quot;">​</a></h1><p>The community created a docker image that makes it much easier to build a Linux-based QGC application. This can give you a massive boost in productivity and help with testing.</p><h2 id="about-the-container" tabindex="-1">About the Container <a class="header-anchor" href="#about-the-container" aria-label="Permalink to &quot;About the Container&quot;">​</a></h2><p>The Container is located in the <code>./deploy/docker</code> directory. It&#39;s based on ubuntu 20.04. It pre-installs all the dependencies at build time, including Qt, thanks to a script located in the same directory, <code>install-qt-linux.sh</code>. The main advantage of using the container is the usage of the <code>CMake</code> build system and its many improvements over <code>qmake</code></p><h2 id="building-the-container" tabindex="-1">Building the Container <a class="header-anchor" href="#building-the-container" aria-label="Permalink to &quot;Building the Container&quot;">​</a></h2><p>Before using the container, you have to build the image. You can accomplish this using docker, running the following script from the root of the QGC source code directory.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker build --file ./deploy/docker/Dockerfile-build-linux -t qgc-linux-docker .</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>-t</code> flag is essential. Keep in mind this is tagging the image for later reference since you can have multiple builds of the same container</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If building on a Mac computer with an M1 chip you must also specify the build option <code>--platform linux/x86_64</code> as shown:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker build --platform linux/x86_64 --file ./deploy/docker/Dockerfile-build-linux -t qgc-linux-docker .</span></span></code></pre></div><p>Otherwise you will get a build error like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>qemu-x86_64: Could not open &#39;/lib64/ld-linux-x86-64.so.2&#39;: No such file or directory</span></span></code></pre></div></div><h2 id="building-qgc-using-the-container" tabindex="-1">Building QGC using the Container <a class="header-anchor" href="#building-qgc-using-the-container" aria-label="Permalink to &quot;Building QGC using the Container&quot;">​</a></h2><p>To use the container to build QGC, you first need to define a directory to save the artifacts. We recommend you create a <code>build</code> directory on the source tree and then run the docker image using the tag provided above as follows, from the root directory:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mkdir build</span></span>\n<span class="line"><span>docker run --rm -v ${PWD}:/project/source -v ${PWD}/build:/project/build qgc-linux-docker</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If using the script to build the Linux image on a Windows host, you would need to reference the PWD differently. On Windows the docker command is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run --rm -v %cd%:/project/source -v %cd%/build:/project/build qgc-linux-docker</span></span></code></pre></div></div><p>Depending on your system resources, or the resources assigned to your Docker Daemon, the build step can take some time.</p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="windows-bash-r-no-such-file-or-directory" tabindex="-1">Windows: &#39;bash\\r&#39;: No such file or directory <a class="header-anchor" href="#windows-bash-r-no-such-file-or-directory" aria-label="Permalink to &quot;Windows: &#39;bash\\r&#39;: No such file or directory&quot;">​</a></h3><p>This error indicates that a Linux script is being run with Windows line endings, which might occur if <code>git</code> was configured to use Windows line endings:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> &gt; [4/7] RUN /tmp/qt/install-qt-linux.sh:</span></span>\n<span class="line"><span>#9 0.445 /usr/bin/env: &#39;bash\\r&#39;: No such file or directory</span></span></code></pre></div><p>One fix is to force Linux line endings using the command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git config --global core.autocrlf false</span></span></code></pre></div><p>Then update/recreate your local repository.</p>',21),n=[s];function c(d,r,l,u,p,h){return i(),t("div",null,n)}const m=e(o,[["render",c]]);export{b as __pageData,m as default};
