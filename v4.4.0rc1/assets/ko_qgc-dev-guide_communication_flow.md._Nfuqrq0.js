import{_ as e,o as t,c as i,R as o}from"./chunks/framework.DhMxou8O.js";const p=JSON.parse('{"title":"Communication Flow","description":"","frontmatter":{},"headers":[],"relativePath":"ko/qgc-dev-guide/communication_flow.md","filePath":"ko/qgc-dev-guide/communication_flow.md"}'),a={name:"ko/qgc-dev-guide/communication_flow.md"},n=o('<h1 id="communication-flow" tabindex="-1">Communication Flow <a class="header-anchor" href="#communication-flow" aria-label="Permalink to &quot;Communication Flow&quot;">â€‹</a></h1><p>Description of the high level communication flow which takes place during a vehicle auto-connect.</p><ul><li>LinkManager always has a UDP port open waiting for a vehicle heartbeat</li><li>LinkManager detects a new known device type (Pixhawk, SiK Radio, PX4 Flow) that makes a UDP connection to the computer <ul><li>LinkManager creates a new SerialLink between the computer and the device</li></ul></li><li>Incoming bytes from the Link are sent to MAVLinkProtocol</li><li>MAVLinkProtocol converts the bytes into a MAVLink message</li><li>If the message is a <code>HEARTBEAT</code> the MultiVehicleManager is notified</li><li>MultiVehicleManager is notified of the <code>HEARTBEAT</code> and creates a new vehicle object based on the information in the <code>HEARTBEAT</code> message</li><li>The vehicle object instantiates the plugins that matches the vehicle</li><li>The ParameterLoader associated with the vehicle object sends a <code>PARAM_REQUEST_LIST</code> to the connected device to load parameters using the parameter protocol</li><li>Once the parameter load is complete, the MissionManager associated with the vehicle object requests the mission items from the connected device using the mission protocol</li><li>Once parameter load is complete, the VehicleComponents display their UI in the Setup view</li></ul>',3),c=[n];function l(s,r,h,d,m,u){return t(),i("div",null,c)}const f=e(a,[["render",l]]);export{p as __pageData,f as default};
