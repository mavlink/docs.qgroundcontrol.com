import{_ as a,c as s,o as t,ag as o}from"./chunks/framework.v43S21bq.js";const h=JSON.parse('{"title":"使用容器构建","description":"","frontmatter":{},"headers":[],"relativePath":"zh/qgc-dev-guide/getting_started/container.md","filePath":"zh/qgc-dev-guide/getting_started/container.md"}'),i={name:"zh/qgc-dev-guide/getting_started/container.md"};function n(c,e,d,l,p,r){return t(),s("div",null,e[0]||(e[0]=[o('<h1 id="使用容器构建" tabindex="-1">使用容器构建 <a class="header-anchor" href="#使用容器构建" aria-label="Permalink to &quot;使用容器构建&quot;">​</a></h1><p>社区创建了一个 Docker 镜像，这使得构建基于 Linux 的 QGC 应用程序变得容易得多。 这可以大大提高您的生产力，并帮助您进行测试。</p><h2 id="关于容器" tabindex="-1">关于容器 <a class="header-anchor" href="#关于容器" aria-label="Permalink to &quot;关于容器&quot;">​</a></h2><p>容器位于 <code>./depl/docker</code> 目录中。 基于 ubuntu 20.04。 它在构建时预先安装所有依赖关系，包括Qt，因为一个脚本位于同一个目录中，<code>install-qt-linux.sh</code>。 使用容器的主要优点是使用 <code>CMake</code> 构建系统和它在 <code>qmake</code> 上的许多改进</p><h2 id="构建容器" tabindex="-1">构建容器 <a class="header-anchor" href="#构建容器" aria-label="Permalink to &quot;构建容器&quot;">​</a></h2><h3 id="脚本" tabindex="-1">脚本 <a class="header-anchor" href="#脚本" aria-label="Permalink to &quot;脚本&quot;">​</a></h3><p>要使用脚本构建容器，请在 qgc 根目录中运行此命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./depl/docker/run-docker-ubuntu.sh</span></span></code></pre></div><h3 id="手册" tabindex="-1">手册 <a class="header-anchor" href="#手册" aria-label="Permalink to &quot;手册&quot;">​</a></h3><p>如果你想要手动使用容器构建，那么你必须先构建镜像。 您可以使用 docker 完成这个操作，从QGC 源代码目录的根目录运行下面的脚本。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker build --file ./deploy/docker/Dockerfile-build-ubuntu -t qgc-ubuntu-docker .</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>-t</code> 选项至关重要。 请记住，这是为镜像添加标签以便日后引用，因为同一容器可能会有多个构建版本。</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If building on a Mac computer with an M1 chip you must also specify the build option <code>--platform linux/x86_64</code> as shown:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker build --platform linux/x86_64 --file ./deploy/docker/Dockerfile-build-ubuntu -t qgc-ubuntu-docker .</span></span></code></pre></div><p>否则，你将会遇到一个构建错误，比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>qemu-x86_64: Could not open &#39;/lib64/ld-linux-x86-64.so.2&#39;: No such file or directory</span></span></code></pre></div></div><h2 id="使用容器构建qgc" tabindex="-1">使用容器构建QGC <a class="header-anchor" href="#使用容器构建qgc" aria-label="Permalink to &quot;使用容器构建QGC&quot;">​</a></h2><p>要使用该容器构建 QGC，首先需要定义一个目录来保存构建产物。 我们建议你在源代码树中创建一个“build”目录，然后从根目录使用上述提供的标签按如下方式运行Docker镜像：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir build</span></span>\n<span class="line"><span>docker run --rm -v ${PWD}:/project/source -v ${PWD}/build:/project/build qgc-ubuntu-docker</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For up to date docker command and options reference relevant run-script in <code>deploy/docker</code>, for example <a href="https://github.com/mavlink/qgroundcontrol/blob/master/deploy/docker/run-docker-ubuntu.sh#L16" target="_blank" rel="noreferrer">run-docker-ubuntu.sh</a>.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If using the script to build the Linux image on a Windows host, you would need to reference the PWD differently. On Windows the docker command is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run --rm -v %cd%:/project/source -v %cd%/build:/project/build qgc-ubuntu-docker</span></span></code></pre></div></div><p>根据您的系统资源或分配给您的 Docker 守护进程的资源，构建步骤可能需要一些时间。</p><h2 id="故障处理" tabindex="-1">故障处理 <a class="header-anchor" href="#故障处理" aria-label="Permalink to &quot;故障处理&quot;">​</a></h2><h3 id="windows-bash-r-no-such-file-or-directory" tabindex="-1">Windows: &#39;bash\\r&#39;: No such file or directory <a class="header-anchor" href="#windows-bash-r-no-such-file-or-directory" aria-label="Permalink to &quot;Windows: &#39;bash\\r&#39;: No such file or directory&quot;">​</a></h3><p>此错误表明正在以Windows换行符格式运行Linux脚本。如果将 <code>git</code> 配置为使用Windows换行符，就可能出现这种情况。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> &gt; [4/7] RUN /tmp/qt/install-qt-linux.sh:</span></span>\n<span class="line"><span>#9 0.445 /usr/bin/env: &#39;bash\\r&#39;: No such file or directory</span></span></code></pre></div><p>一个修复是强制使用 Linux 行尾使用命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git config --global core.autocrlf false</span></span></code></pre></div><p>然后更新/重新创建您的本地资源库。</p>',26)]))}const b=a(i,[["render",n]]);export{h as __pageData,b as default};
